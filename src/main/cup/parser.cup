package org.example;

import java_cup.runtime.*;

/* Preliminaries to set up and use the scanner.  */
//init with {: scanner.init();              :};
scan with {: return this.getScanner().next_token(); :};


/* Terminals (tokens returned by the scanner). */
terminal            TAG_OPENING_START, TAG_OPENING_END, TAG_CLOSING, SINGLE_TAG_END, TAG_ATTRIBUTE_NAME, TAG_ATTRIBUTE_VALUE, CHAR_SEQUENCE, EQUALITY, DOCTYPE;


/* Non terminals */
non terminal            document, tag, tag_opening, tag_content, single_tag, tag_attributes, tag_attribute;

/* Precedences */
//precedence left PLUS, MINUS;
//precedence left TIMES, DIVIDE, MOD;
//precedence left UMINUS;

/* The grammar */
document ::= DOCTYPE document {:
            RESULT = "doctype";
            System.out.println(RESULT);
            :}
        | tag document | CHAR_SEQUENCE document | ;
tag ::=
        tag_opening:e1 tag_content TAG_CLOSING:e2 {:
            String e2str = (String) e2;
            e2str = e2str.trim();
            e2str = e2str.substring(2, e2str.length()-1);
            e2str = e2str.trim();
//            System.out.println("e1: " + e1 + " e2str: " + e2str);
            if(e2str.equals(e1)) {
                RESULT = e1;
                System.out.println(RESULT);
            }
            else {
                System.out.println("błąd");
            }
        :}
      |
        single_tag;
single_tag ::= tag_opening:e1 tag_attributes SINGLE_TAG_END {:
                RESULT = e1;
                System.out.println(RESULT);
            :};
tag_opening ::= TAG_OPENING_START:e1 tag_attributes TAG_OPENING_END {: RESULT = ((String)e1).trim().substring(1).trim(); :};
tag_attributes ::= tag_attribute tag_attributes | ;
tag_attribute ::= TAG_ATTRIBUTE_NAME EQUALITY TAG_ATTRIBUTE_VALUE | TAG_ATTRIBUTE_NAME;
tag_content ::= CHAR_SEQUENCE tag_content | tag tag_content | ;
