// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/jflex/file2.flex

/* JFlex example: partial Java language lexer specification */
import java_cup.runtime.*;
import java_cup.sym;
import org.example.MySymbolsClassName;
import java.util.Map;
import static java.util.Map.entry;

/**
 * This class is a simple example lexer.
 */

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class HTMLScanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int TAG_INSIDE = 2;
  public static final int ATTRIBUTE_VALUE = 4;
  public static final int COMMENT = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\12\0\1\6\1\0\1\7\1\10\6\11"+
    "\3\10\2\0\1\12\1\13\1\14\2\0\2\15\1\16"+
    "\1\17\1\20\11\15\1\21\1\22\3\15\1\23\4\15"+
    "\1\24\1\15\6\0\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\15\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\15\1\44\1\45\1\46\1\47"+
    "\1\50\1\15\1\51\1\52\1\15\u0385\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\1\0\1\3\2\0\1\4\1\5"+
    "\1\6\2\7\4\0\2\10\3\0\1\10\4\0\1\10"+
    "\2\0\1\10\1\11\10\0\1\12\10\0\1\10\11\0"+
    "\1\10\1\0\1\7\1\13\1\14\1\0\1\15\26\0"+
    "\1\10\24\0\1\16";

  private static int [] zzUnpackAction() {
    int [] result = new int[113];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\u0102\0\u012d"+
    "\0\254\0\u0158\0\u0183\0\u01ae\0\u01ae\0\u01d9\0\u0204\0\126"+
    "\0\u022f\0\u025a\0\u0285\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c"+
    "\0\u0387\0\u03b2\0\u03dd\0\u0408\0\u0433\0\u045e\0\u01ae\0\u0489"+
    "\0\u04b4\0\u04df\0\u01ae\0\u050a\0\u0535\0\u0560\0\u058b\0\u05b6"+
    "\0\u05e1\0\u060c\0\u0637\0\u01ae\0\u0662\0\u068d\0\u06b8\0\u06e3"+
    "\0\u070e\0\u0739\0\u0764\0\u078f\0\u07ba\0\u07e5\0\u0810\0\u083b"+
    "\0\u0866\0\u0891\0\u08bc\0\u08e7\0\u0912\0\u093d\0\u0968\0\u0993"+
    "\0\u01ae\0\u01ae\0\u01ae\0\u09be\0\u01ae\0\u09e9\0\u0a14\0\u0a3f"+
    "\0\u0a6a\0\u0a95\0\u0ac0\0\u04df\0\u0aeb\0\u0b16\0\u0b41\0\u0b6c"+
    "\0\u0b97\0\u0bc2\0\u0bed\0\u0c18\0\u0c43\0\u0c6e\0\u0c99\0\u0cc4"+
    "\0\u0cef\0\u0d1a\0\u0d45\0\u0d45\0\u0d70\0\u0d9b\0\u0dc6\0\u0df1"+
    "\0\u0e1c\0\u0e47\0\u0e72\0\u0e9d\0\u0ec8\0\u0ef3\0\u0f1e\0\u0f49"+
    "\0\u0f74\0\u0f9f\0\u0fca\0\u0ff5\0\u1020\0\u104b\0\u1076\0\u10a1"+
    "\0\u01ae";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[113];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\2\7\6\5\1\10\1\11\37\5\1\0"+
    "\3\7\3\0\1\12\2\0\1\13\1\14\1\15\36\16"+
    "\1\17\1\20\2\3\1\17\1\21\6\17\1\0\36\17"+
    "\6\0\1\22\44\0\2\5\2\0\6\5\1\0\41\5"+
    "\1\6\2\7\6\5\1\0\40\5\1\0\3\7\53\0"+
    "\1\23\2\0\1\24\15\0\1\25\1\26\1\0\1\27"+
    "\1\0\1\30\1\0\1\31\1\32\1\0\1\33\1\34"+
    "\1\35\1\36\1\37\1\0\1\40\1\41\1\42\17\0"+
    "\1\43\42\0\1\44\136\0\36\16\2\17\2\0\1\17"+
    "\1\0\6\17\1\0\36\17\2\45\2\0\1\45\1\0"+
    "\45\45\6\0\1\46\52\0\1\47\10\0\1\50\43\0"+
    "\2\51\3\0\36\51\44\0\1\52\50\0\1\53\1\0"+
    "\1\54\2\0\1\55\40\0\1\56\57\0\1\57\21\0"+
    "\1\37\17\0\1\60\14\0\1\61\44\0\1\62\1\63"+
    "\36\0\1\64\7\0\1\65\46\0\1\66\46\0\1\56"+
    "\64\0\1\37\3\0\1\67\40\0\1\70\11\0\1\71"+
    "\2\0\1\72\31\0\1\73\1\74\1\0\1\37\1\75"+
    "\1\76\1\0\1\77\1\100\6\0\1\37\45\0\1\37"+
    "\21\0\1\47\44\0\2\45\2\0\1\45\1\101\45\45"+
    "\14\0\1\102\44\0\1\103\65\0\1\104\41\0\2\51"+
    "\2\0\1\105\36\51\46\0\1\106\34\0\1\107\70\0"+
    "\1\110\54\0\1\37\44\0\1\111\1\0\1\112\33\0"+
    "\1\113\65\0\1\114\45\0\1\54\62\0\1\115\35\0"+
    "\1\116\65\0\1\117\57\0\1\120\52\0\1\121\43\0"+
    "\1\122\40\0\1\123\77\0\1\124\26\0\1\124\66\0"+
    "\1\53\61\0\1\125\43\0\1\126\41\0\1\127\67\0"+
    "\1\124\22\0\1\130\71\0\1\131\67\0\1\37\46\0"+
    "\1\132\52\0\1\133\44\0\1\37\42\0\1\134\71\0"+
    "\1\135\34\0\1\114\57\0\1\54\41\0\1\54\62\0"+
    "\1\132\46\0\1\136\62\0\1\37\50\0\1\137\61\0"+
    "\1\140\46\0\1\141\35\0\1\142\50\0\1\143\56\0"+
    "\1\124\65\0\1\123\41\0\1\144\67\0\1\54\33\0"+
    "\1\141\54\0\1\37\46\0\1\145\73\0\1\37\34\0"+
    "\1\37\46\0\1\146\72\0\1\37\52\0\1\147\30\0"+
    "\1\150\61\0\1\151\41\0\1\152\57\0\1\37\26\0"+
    "\2\153\1\154\103\0\1\155\20\0\1\153\31\0\1\155"+
    "\64\0\1\156\44\0\1\157\51\0\1\160\27\0\1\161"+
    "\36\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4300];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\3\1\1\0\1\1\2\0\2\11\3\1\4\0"+
    "\2\1\3\0\1\1\4\0\1\11\2\0\1\1\1\11"+
    "\10\0\1\11\10\0\1\1\11\0\1\1\1\0\3\11"+
    "\1\0\1\11\26\0\1\1\24\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[113];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

  Map<String, Integer> openingTagStartSymbolMap = Map.ofEntries(
    entry("a", MySymbolsClassName.TAG_A_OPENING_START),
    entry("article", MySymbolsClassName.TAG_ARTICLE_OPENING_START),
    entry("b", MySymbolsClassName.TAG_B_OPENING_START),
    entry("body", MySymbolsClassName.TAG_BODY_OPENING_START),
    entry("button", MySymbolsClassName.TAG_BUTTON_OPENING_START),
    entry("div", MySymbolsClassName.TAG_DIV_OPENING_START),
    entry("footer", MySymbolsClassName.TAG_FOOTER_OPENING_START),
    entry("form", MySymbolsClassName.TAG_FORM_OPENING_START),
    entry("h1", MySymbolsClassName.TAG_H1_OPENING_START),
    entry("h2", MySymbolsClassName.TAG_H2_OPENING_START),
    entry("h3", MySymbolsClassName.TAG_H3_OPENING_START),
    entry("h4", MySymbolsClassName.TAG_H4_OPENING_START),
    entry("h5", MySymbolsClassName.TAG_H5_OPENING_START),
    entry("h6", MySymbolsClassName.TAG_H6_OPENING_START),
    entry("head", MySymbolsClassName.TAG_HEAD_OPENING_START),
    entry("header", MySymbolsClassName.TAG_HEADER_OPENING_START),
    entry("html", MySymbolsClassName.TAG_HTML_OPENING_START),
    entry("i", MySymbolsClassName.TAG_I_OPENING_START),
    entry("label", MySymbolsClassName.TAG_LABEL_OPENING_START),
    entry("li", MySymbolsClassName.TAG_LI_OPENING_START),
    entry("nav", MySymbolsClassName.TAG_NAV_OPENING_START),
    entry("ol", MySymbolsClassName.TAG_OL_OPENING_START),
    entry("option", MySymbolsClassName.TAG_OPTION_OPENING_START),
    entry("p", MySymbolsClassName.TAG_P_OPENING_START),
    entry("select", MySymbolsClassName.TAG_SELECT_OPENING_START),
    entry("span", MySymbolsClassName.TAG_SPAN_OPENING_START),
    entry("style", MySymbolsClassName.TAG_STYLE_OPENING_START),
    entry("table", MySymbolsClassName.TAG_TABLE_OPENING_START),
    entry("tbody", MySymbolsClassName.TAG_TBODY_OPENING_START),
    entry("td", MySymbolsClassName.TAG_TD_OPENING_START),
    entry("textarea", MySymbolsClassName.TAG_TEXTAREA_OPENING_START),
    entry("tfoot", MySymbolsClassName.TAG_TFOOT_OPENING_START),
    entry("th", MySymbolsClassName.TAG_TH_OPENING_START),
    entry("thead", MySymbolsClassName.TAG_THEAD_OPENING_START),
    entry("title", MySymbolsClassName.TAG_TITLE_OPENING_START),
    entry("tr", MySymbolsClassName.TAG_TR_OPENING_START),
    entry("u", MySymbolsClassName.TAG_U_OPENING_START),
    entry("ul", MySymbolsClassName.TAG_UL_OPENING_START)
  );

  Map<String, Integer> singleTagStartSymbolMap = Map.ofEntries(
      entry("br", MySymbolsClassName.TAG_BR_OPENING),
      entry("img", MySymbolsClassName.TAG_IMG_OPENING),
      entry("input", MySymbolsClassName.TAG_INPUT_OPENING),
      entry("link", MySymbolsClassName.TAG_LINK_OPENING),
      entry("meta", MySymbolsClassName.TAG_META_OPENING)
    );

  Map<String, Integer> closingTagSymbolMap = Map.ofEntries(
      entry("a", MySymbolsClassName.TAG_A_CLOSING),
      entry("article", MySymbolsClassName.TAG_ARTICLE_CLOSING),
      entry("b", MySymbolsClassName.TAG_B_CLOSING),
      entry("body", MySymbolsClassName.TAG_BODY_CLOSING),
      entry("button", MySymbolsClassName.TAG_BUTTON_CLOSING),
      entry("div", MySymbolsClassName.TAG_DIV_CLOSING),
      entry("footer", MySymbolsClassName.TAG_FOOTER_CLOSING),
      entry("form", MySymbolsClassName.TAG_FORM_CLOSING),
      entry("h1", MySymbolsClassName.TAG_H1_CLOSING),
      entry("h2", MySymbolsClassName.TAG_H2_CLOSING),
      entry("h3", MySymbolsClassName.TAG_H3_CLOSING),
      entry("h4", MySymbolsClassName.TAG_H4_CLOSING),
      entry("h5", MySymbolsClassName.TAG_H5_CLOSING),
      entry("h6", MySymbolsClassName.TAG_H6_CLOSING),
      entry("head", MySymbolsClassName.TAG_HEAD_CLOSING),
      entry("header", MySymbolsClassName.TAG_HEADER_CLOSING),
      entry("html", MySymbolsClassName.TAG_HTML_CLOSING),
      entry("i", MySymbolsClassName.TAG_I_CLOSING),
      entry("label", MySymbolsClassName.TAG_LABEL_CLOSING),
      entry("li", MySymbolsClassName.TAG_LI_CLOSING),
      entry("nav", MySymbolsClassName.TAG_NAV_CLOSING),
      entry("ol", MySymbolsClassName.TAG_OL_CLOSING),
      entry("option", MySymbolsClassName.TAG_OPTION_CLOSING),
      entry("p", MySymbolsClassName.TAG_P_CLOSING),
      entry("select", MySymbolsClassName.TAG_SELECT_CLOSING),
      entry("span", MySymbolsClassName.TAG_SPAN_CLOSING),
      entry("style", MySymbolsClassName.TAG_STYLE_CLOSING),
      entry("table", MySymbolsClassName.TAG_TABLE_CLOSING),
      entry("tbody", MySymbolsClassName.TAG_TBODY_CLOSING),
      entry("td", MySymbolsClassName.TAG_TD_CLOSING),
      entry("textarea", MySymbolsClassName.TAG_TEXTAREA_CLOSING),
      entry("tfoot", MySymbolsClassName.TAG_TFOOT_CLOSING),
      entry("th", MySymbolsClassName.TAG_TH_CLOSING),
      entry("thead", MySymbolsClassName.TAG_THEAD_CLOSING),
      entry("title", MySymbolsClassName.TAG_TITLE_CLOSING),
      entry("tr", MySymbolsClassName.TAG_TR_CLOSING),
      entry("u", MySymbolsClassName.TAG_U_CLOSING),
      entry("ul", MySymbolsClassName.TAG_UL_CLOSING)
    );

  StringBuffer string = new StringBuffer();

  ComplexSymbolFactory symbolFactory = new ComplexSymbolFactory();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }

  private Integer getOpeningTagSymbol(String value) {
      value = value.trim().substring(1).trim();
      return openingTagStartSymbolMap.get(value);
  }

  private Integer getClosingTagSymbol(String value) {
      value = value.trim().substring(2).trim();
      value = value.substring(0, value.length()-1).trim();
      return closingTagSymbolMap.get(value);
  }

  private Integer getSingleOpeningTagSymbol(String value) {
      value = value.trim().substring(1).trim();
      if(value.charAt(0) == '/') {
          value = value.substring(1).trim();
      }
      if(value.charAt(value.length()-1) == '/') {
          value = value.substring(0, value.length()-1);
      }
      return singleTagStartSymbolMap.get(value);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  HTMLScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return symbol(MySymbolsClassName.CHAR_SEQUENCE, yytext());
            }
            // fall through
          case 15: break;
          case 2:
            { /* ignore */
            }
            // fall through
          case 16: break;
          case 3:
            { return symbol(MySymbolsClassName.EQUALITY, yytext());
            }
            // fall through
          case 17: break;
          case 4:
            { yybegin(ATTRIBUTE_VALUE);
                                return symbol(MySymbolsClassName.EQUALITY, yytext());
            }
            // fall through
          case 18: break;
          case 5:
            { yybegin(YYINITIAL);
                                return symbol(MySymbolsClassName.TAG_OPENING_END, yytext());
            }
            // fall through
          case 19: break;
          case 6:
            { return symbol(MySymbolsClassName.TAG_ATTRIBUTE_NAME, yytext());
            }
            // fall through
          case 20: break;
          case 7:
            { yybegin(TAG_INSIDE);
                                                    return symbol(MySymbolsClassName.TAG_ATTRIBUTE_VALUE, yytext());
            }
            // fall through
          case 21: break;
          case 8:
            { yybegin(TAG_INSIDE);
                                return symbol(getOpeningTagSymbol(yytext()));
            }
            // fall through
          case 22: break;
          case 9:
            { yybegin(YYINITIAL);
                                return symbol(MySymbolsClassName.SINGLE_TAG_END, yytext());
            }
            // fall through
          case 23: break;
          case 10:
            { yybegin(TAG_INSIDE);
                                  return symbol(getSingleOpeningTagSymbol(yytext()));
            }
            // fall through
          case 24: break;
          case 11:
            { yybegin(YYINITIAL);
            }
            // fall through
          case 25: break;
          case 12:
            { yybegin(COMMENT);
            }
            // fall through
          case 26: break;
          case 13:
            { return symbol(getClosingTagSymbol(yytext()));
            }
            // fall through
          case 27: break;
          case 14:
            { return symbol(MySymbolsClassName.DOCTYPE, yytext());
            }
            // fall through
          case 28: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
