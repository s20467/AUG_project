
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package org.example;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MyParserClassName extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return MySymbolsClassName.class;
}

  /** Default constructor. */
  @Deprecated
  public MyParserClassName() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MyParserClassName(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MyParserClassName(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\022\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\002\000\002\003\005" +
    "\000\002\003\003\000\002\006\005\000\002\004\005\000" +
    "\002\007\004\000\002\007\002\000\002\010\005\000\002" +
    "\010\003\000\002\005\004\000\002\005\004\000\002\005" +
    "\002\000\002\011\003\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\034\000\012\002\ufffd\004\006\012\011\014\013\001" +
    "\002\000\004\002\036\001\002\000\012\002\ufffd\004\006" +
    "\012\011\014\013\001\002\000\010\005\ufff7\007\ufff7\010" +
    "\026\001\002\000\012\002\ufffd\004\006\012\011\014\013" +
    "\001\002\000\014\002\ufffb\004\ufffb\006\ufffb\012\ufffb\014" +
    "\ufffb\001\002\000\012\002\ufffd\004\006\012\011\014\013" +
    "\001\002\000\010\004\006\006\ufff2\012\016\001\002\000" +
    "\012\002\ufff0\004\ufff0\012\ufff0\014\ufff0\001\002\000\010" +
    "\004\006\006\ufff2\012\016\001\002\000\004\006\020\001" +
    "\002\000\010\004\006\006\ufff2\012\016\001\002\000\004" +
    "\006\ufff4\001\002\000\014\002\ufff1\004\ufff1\006\ufff1\012" +
    "\ufff1\014\ufff1\001\002\000\014\002\ufffc\004\ufffc\006\ufffc" +
    "\012\ufffc\014\ufffc\001\002\000\004\006\ufff3\001\002\000" +
    "\004\002\ufffe\001\002\000\004\002\001\001\002\000\010" +
    "\005\ufff7\007\ufff7\010\026\001\002\000\012\005\ufff5\007" +
    "\ufff5\010\ufff5\013\032\001\002\000\006\005\030\007\031" +
    "\001\002\000\010\004\ufff9\006\ufff9\012\ufff9\001\002\000" +
    "\014\002\ufffa\004\ufffa\006\ufffa\012\ufffa\014\ufffa\001\002" +
    "\000\004\011\033\001\002\000\010\005\ufff6\007\ufff6\010" +
    "\ufff6\001\002\000\006\005\ufff8\007\ufff8\001\002\000\004" +
    "\002\uffff\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\034\000\014\002\003\003\004\004\011\006\007\012" +
    "\006\001\001\000\002\001\001\000\014\002\034\003\004" +
    "\004\011\006\007\012\006\001\001\000\006\007\026\010" +
    "\024\001\001\000\014\002\023\003\004\004\011\006\007" +
    "\012\006\001\001\000\002\001\001\000\014\002\022\003" +
    "\004\004\011\006\007\012\006\001\001\000\012\003\013" +
    "\004\011\005\014\006\007\001\001\000\002\001\001\000" +
    "\012\003\013\004\011\005\021\006\007\001\001\000\004" +
    "\011\020\001\001\000\012\003\013\004\011\005\016\006" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\033\010\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MyParserClassName$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MyParserClassName$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MyParserClassName$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return this.getScanner().next_token(); 
    }


  private static Integer indentCount = 0;
  private static StringBuilder strb = new StringBuilder();

  public static String getIndent() {
    strb.setLength(0);
    for(int i=0; i<indentCount; i++) {
        strb.append("\t");
    }
    return strb.toString();
  }

  public static void incrementIndentCount() {
    indentCount++;
  }

  public static void decrementIndentCount() {
      indentCount--;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MyParserClassName$actions {
  private final MyParserClassName parser;

  /** Constructor */
  CUP$MyParserClassName$actions(MyParserClassName parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MyParserClassName$do_action_part00000000(
    int                        CUP$MyParserClassName$act_num,
    java_cup.runtime.lr_parser CUP$MyParserClassName$parser,
    java.util.Stack            CUP$MyParserClassName$stack,
    int                        CUP$MyParserClassName$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MyParserClassName$result;

      /* select the action based on the action number */
      switch (CUP$MyParserClassName$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // document ::= doctype document 
            {
              String RESULT =null;

              CUP$MyParserClassName$result = parser.getSymbolFactory().newSymbol("document",0, ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.elementAt(CUP$MyParserClassName$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()), RESULT);
            }
          return CUP$MyParserClassName$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= document EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.elementAt(CUP$MyParserClassName$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.elementAt(CUP$MyParserClassName$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$MyParserClassName$stack.elementAt(CUP$MyParserClassName$top-1)).value;
		RESULT = start_val;
              CUP$MyParserClassName$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.elementAt(CUP$MyParserClassName$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MyParserClassName$parser.done_parsing();
          return CUP$MyParserClassName$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // document ::= tag document 
            {
              String RESULT =null;

              CUP$MyParserClassName$result = parser.getSymbolFactory().newSymbol("document",0, ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.elementAt(CUP$MyParserClassName$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()), RESULT);
            }
          return CUP$MyParserClassName$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // document ::= CHAR_SEQUENCE document 
            {
              String RESULT =null;

              CUP$MyParserClassName$result = parser.getSymbolFactory().newSymbol("document",0, ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.elementAt(CUP$MyParserClassName$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()), RESULT);
            }
          return CUP$MyParserClassName$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // document ::= 
            {
              String RESULT =null;

              CUP$MyParserClassName$result = parser.getSymbolFactory().newSymbol("document",0, ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()), RESULT);
            }
          return CUP$MyParserClassName$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tag ::= tag_opening tag_content tag_closing 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.elementAt(CUP$MyParserClassName$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.elementAt(CUP$MyParserClassName$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$MyParserClassName$stack.elementAt(CUP$MyParserClassName$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$MyParserClassName$stack.peek()).value;
		
            RESULT = e1;
            e2 = e2.substring(0, 1) + e2.substring(2, e2.length());
            if(!e2.equals(e1)) {
                System.out.println("błąd");
            }
        
              CUP$MyParserClassName$result = parser.getSymbolFactory().newSymbol("tag",1, ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.elementAt(CUP$MyParserClassName$top-2)), ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()), RESULT);
            }
          return CUP$MyParserClassName$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tag ::= single_tag 
            {
              String RESULT =null;

              CUP$MyParserClassName$result = parser.getSymbolFactory().newSymbol("tag",1, ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()), RESULT);
            }
          return CUP$MyParserClassName$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // single_tag ::= TAG_OPENING_START tag_attributes SINGLE_TAG_END 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.elementAt(CUP$MyParserClassName$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.elementAt(CUP$MyParserClassName$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$MyParserClassName$stack.elementAt(CUP$MyParserClassName$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$MyParserClassName$stack.peek()).value;
		 RESULT = e1 + e2; System.out.println(getIndent() + RESULT); 
              CUP$MyParserClassName$result = parser.getSymbolFactory().newSymbol("single_tag",4, ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.elementAt(CUP$MyParserClassName$top-2)), ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()), RESULT);
            }
          return CUP$MyParserClassName$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tag_opening ::= TAG_OPENING_START tag_attributes TAG_OPENING_END 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.elementAt(CUP$MyParserClassName$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.elementAt(CUP$MyParserClassName$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$MyParserClassName$stack.elementAt(CUP$MyParserClassName$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$MyParserClassName$stack.peek()).value;
		 RESULT = e1.trim() + e2.trim(); System.out.println(getIndent() + RESULT); incrementIndentCount(); 
              CUP$MyParserClassName$result = parser.getSymbolFactory().newSymbol("tag_opening",2, ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.elementAt(CUP$MyParserClassName$top-2)), ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()), RESULT);
            }
          return CUP$MyParserClassName$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tag_attributes ::= tag_attribute tag_attributes 
            {
              String RESULT =null;

              CUP$MyParserClassName$result = parser.getSymbolFactory().newSymbol("tag_attributes",5, ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.elementAt(CUP$MyParserClassName$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()), RESULT);
            }
          return CUP$MyParserClassName$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tag_attributes ::= 
            {
              String RESULT =null;

              CUP$MyParserClassName$result = parser.getSymbolFactory().newSymbol("tag_attributes",5, ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()), RESULT);
            }
          return CUP$MyParserClassName$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tag_attribute ::= TAG_ATTRIBUTE_NAME EQUALITY TAG_ATTRIBUTE_VALUE 
            {
              String RESULT =null;

              CUP$MyParserClassName$result = parser.getSymbolFactory().newSymbol("tag_attribute",6, ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.elementAt(CUP$MyParserClassName$top-2)), ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()), RESULT);
            }
          return CUP$MyParserClassName$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tag_attribute ::= TAG_ATTRIBUTE_NAME 
            {
              String RESULT =null;

              CUP$MyParserClassName$result = parser.getSymbolFactory().newSymbol("tag_attribute",6, ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()), RESULT);
            }
          return CUP$MyParserClassName$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tag_content ::= CHAR_SEQUENCE tag_content 
            {
              String RESULT =null;

              CUP$MyParserClassName$result = parser.getSymbolFactory().newSymbol("tag_content",3, ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.elementAt(CUP$MyParserClassName$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()), RESULT);
            }
          return CUP$MyParserClassName$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tag_content ::= tag tag_content 
            {
              String RESULT =null;

              CUP$MyParserClassName$result = parser.getSymbolFactory().newSymbol("tag_content",3, ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.elementAt(CUP$MyParserClassName$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()), RESULT);
            }
          return CUP$MyParserClassName$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tag_content ::= 
            {
              String RESULT =null;

              CUP$MyParserClassName$result = parser.getSymbolFactory().newSymbol("tag_content",3, ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()), RESULT);
            }
          return CUP$MyParserClassName$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tag_closing ::= TAG_CLOSING 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$MyParserClassName$stack.peek()).value;
		 RESULT = e1; decrementIndentCount(); System.out.println(getIndent() + RESULT); 
              CUP$MyParserClassName$result = parser.getSymbolFactory().newSymbol("tag_closing",7, ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()), RESULT);
            }
          return CUP$MyParserClassName$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // doctype ::= DOCTYPE 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$MyParserClassName$stack.peek()).value;
		 RESULT = e1; System.out.println(getIndent() + RESULT); 
              CUP$MyParserClassName$result = parser.getSymbolFactory().newSymbol("doctype",8, ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()), RESULT);
            }
          return CUP$MyParserClassName$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MyParserClassName$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MyParserClassName$do_action(
    int                        CUP$MyParserClassName$act_num,
    java_cup.runtime.lr_parser CUP$MyParserClassName$parser,
    java.util.Stack            CUP$MyParserClassName$stack,
    int                        CUP$MyParserClassName$top)
    throws java.lang.Exception
    {
              return CUP$MyParserClassName$do_action_part00000000(
                               CUP$MyParserClassName$act_num,
                               CUP$MyParserClassName$parser,
                               CUP$MyParserClassName$stack,
                               CUP$MyParserClassName$top);
    }
}

}
