
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package org.example;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MyParserClassName extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return MySymbolsClassName.class;
}

  /** Default constructor. */
  @Deprecated
  public MyParserClassName() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MyParserClassName(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MyParserClassName(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\020\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\002\000\002\003\005" +
    "\000\002\003\003\000\002\006\005\000\002\004\005\000" +
    "\002\007\004\000\002\007\002\000\002\010\005\000\002" +
    "\010\003\000\002\005\004\000\002\005\004\000\002\005" +
    "\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\033\000\012\002\ufffd\004\006\012\010\014\012\001" +
    "\002\000\004\002\035\001\002\000\012\002\ufffd\004\006" +
    "\012\010\014\012\001\002\000\006\005\ufff7\010\014\001" +
    "\002\000\014\002\ufffb\004\ufffb\006\ufffb\012\ufffb\014\ufffb" +
    "\001\002\000\012\002\ufffd\004\006\012\010\014\012\001" +
    "\002\000\014\004\006\006\ufff2\007\ufff7\010\014\012\020" +
    "\001\002\000\012\002\ufffd\004\006\012\010\014\012\001" +
    "\002\000\004\002\001\001\002\000\012\005\ufff5\007\ufff5" +
    "\010\ufff5\013\027\001\002\000\004\007\026\001\002\000" +
    "\010\005\ufff7\007\ufff7\010\014\001\002\000\004\006\024" +
    "\001\002\000\010\004\006\006\ufff2\012\020\001\002\000" +
    "\010\004\006\006\ufff2\012\020\001\002\000\004\006\ufff3" +
    "\001\002\000\004\006\ufff4\001\002\000\014\002\ufffc\004" +
    "\ufffc\006\ufffc\012\ufffc\014\ufffc\001\002\000\006\005\ufff8" +
    "\007\ufff8\001\002\000\014\002\ufffa\004\ufffa\006\ufffa\012" +
    "\ufffa\014\ufffa\001\002\000\004\011\030\001\002\000\010" +
    "\005\ufff6\007\ufff6\010\ufff6\001\002\000\004\002\ufffe\001" +
    "\002\000\004\005\033\001\002\000\014\004\ufff9\006\ufff9" +
    "\007\ufff9\010\ufff9\012\ufff9\001\002\000\004\002\uffff\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\033\000\012\002\003\003\004\004\010\006\006\001" +
    "\001\000\002\001\001\000\012\002\033\003\004\004\010" +
    "\006\006\001\001\000\006\007\031\010\015\001\001\000" +
    "\002\001\001\000\012\002\030\003\004\004\010\006\006" +
    "\001\001\000\016\003\020\004\010\005\016\006\006\007" +
    "\014\010\015\001\001\000\012\002\012\003\004\004\010" +
    "\006\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\024\010\015\001\001\000\002" +
    "\001\001\000\012\003\020\004\010\005\022\006\006\001" +
    "\001\000\012\003\020\004\010\005\021\006\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MyParserClassName$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MyParserClassName$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MyParserClassName$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return this.getScanner().next_token(); 
    }

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MyParserClassName$actions {
  private final MyParserClassName parser;

  /** Constructor */
  CUP$MyParserClassName$actions(MyParserClassName parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MyParserClassName$do_action_part00000000(
    int                        CUP$MyParserClassName$act_num,
    java_cup.runtime.lr_parser CUP$MyParserClassName$parser,
    java.util.Stack            CUP$MyParserClassName$stack,
    int                        CUP$MyParserClassName$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MyParserClassName$result;

      /* select the action based on the action number */
      switch (CUP$MyParserClassName$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // document ::= DOCTYPE document 
            {
              Object RESULT =null;
		
            RESULT = "doctype";
            System.out.println(RESULT);
            
              CUP$MyParserClassName$result = parser.getSymbolFactory().newSymbol("document",0, ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.elementAt(CUP$MyParserClassName$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()), RESULT);
            }
          return CUP$MyParserClassName$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= document EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.elementAt(CUP$MyParserClassName$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.elementAt(CUP$MyParserClassName$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MyParserClassName$stack.elementAt(CUP$MyParserClassName$top-1)).value;
		RESULT = start_val;
              CUP$MyParserClassName$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.elementAt(CUP$MyParserClassName$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MyParserClassName$parser.done_parsing();
          return CUP$MyParserClassName$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // document ::= tag document 
            {
              Object RESULT =null;

              CUP$MyParserClassName$result = parser.getSymbolFactory().newSymbol("document",0, ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.elementAt(CUP$MyParserClassName$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()), RESULT);
            }
          return CUP$MyParserClassName$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // document ::= CHAR_SEQUENCE document 
            {
              Object RESULT =null;

              CUP$MyParserClassName$result = parser.getSymbolFactory().newSymbol("document",0, ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.elementAt(CUP$MyParserClassName$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()), RESULT);
            }
          return CUP$MyParserClassName$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // document ::= 
            {
              Object RESULT =null;

              CUP$MyParserClassName$result = parser.getSymbolFactory().newSymbol("document",0, ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()), RESULT);
            }
          return CUP$MyParserClassName$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tag ::= tag_opening tag_content TAG_CLOSING 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.elementAt(CUP$MyParserClassName$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.elementAt(CUP$MyParserClassName$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$MyParserClassName$stack.elementAt(CUP$MyParserClassName$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$MyParserClassName$stack.peek()).value;
		
            String e2str = (String) e2;
            e2str = e2str.trim();
            e2str = e2str.substring(2, e2str.length()-1);
            e2str = e2str.trim();
//            System.out.println("e1: " + e1 + " e2str: " + e2str);
            if(e2str.equals(e1)) {
                RESULT = e1;
                System.out.println(RESULT);
            }
            else {
                System.out.println("błąd");
            }
        
              CUP$MyParserClassName$result = parser.getSymbolFactory().newSymbol("tag",1, ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.elementAt(CUP$MyParserClassName$top-2)), ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()), RESULT);
            }
          return CUP$MyParserClassName$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tag ::= single_tag 
            {
              Object RESULT =null;

              CUP$MyParserClassName$result = parser.getSymbolFactory().newSymbol("tag",1, ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()), RESULT);
            }
          return CUP$MyParserClassName$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // single_tag ::= tag_opening tag_attributes SINGLE_TAG_END 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.elementAt(CUP$MyParserClassName$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.elementAt(CUP$MyParserClassName$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$MyParserClassName$stack.elementAt(CUP$MyParserClassName$top-2)).value;
		
                RESULT = e1;
                System.out.println(RESULT);
            
              CUP$MyParserClassName$result = parser.getSymbolFactory().newSymbol("single_tag",4, ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.elementAt(CUP$MyParserClassName$top-2)), ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()), RESULT);
            }
          return CUP$MyParserClassName$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tag_opening ::= TAG_OPENING_START tag_attributes TAG_OPENING_END 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.elementAt(CUP$MyParserClassName$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.elementAt(CUP$MyParserClassName$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$MyParserClassName$stack.elementAt(CUP$MyParserClassName$top-2)).value;
		 RESULT = ((String)e1).trim().substring(1).trim(); 
              CUP$MyParserClassName$result = parser.getSymbolFactory().newSymbol("tag_opening",2, ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.elementAt(CUP$MyParserClassName$top-2)), ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()), RESULT);
            }
          return CUP$MyParserClassName$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tag_attributes ::= tag_attribute tag_attributes 
            {
              Object RESULT =null;

              CUP$MyParserClassName$result = parser.getSymbolFactory().newSymbol("tag_attributes",5, ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.elementAt(CUP$MyParserClassName$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()), RESULT);
            }
          return CUP$MyParserClassName$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tag_attributes ::= 
            {
              Object RESULT =null;

              CUP$MyParserClassName$result = parser.getSymbolFactory().newSymbol("tag_attributes",5, ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()), RESULT);
            }
          return CUP$MyParserClassName$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tag_attribute ::= TAG_ATTRIBUTE_NAME EQUALITY TAG_ATTRIBUTE_VALUE 
            {
              Object RESULT =null;

              CUP$MyParserClassName$result = parser.getSymbolFactory().newSymbol("tag_attribute",6, ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.elementAt(CUP$MyParserClassName$top-2)), ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()), RESULT);
            }
          return CUP$MyParserClassName$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tag_attribute ::= TAG_ATTRIBUTE_NAME 
            {
              Object RESULT =null;

              CUP$MyParserClassName$result = parser.getSymbolFactory().newSymbol("tag_attribute",6, ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()), RESULT);
            }
          return CUP$MyParserClassName$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tag_content ::= CHAR_SEQUENCE tag_content 
            {
              Object RESULT =null;

              CUP$MyParserClassName$result = parser.getSymbolFactory().newSymbol("tag_content",3, ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.elementAt(CUP$MyParserClassName$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()), RESULT);
            }
          return CUP$MyParserClassName$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tag_content ::= tag tag_content 
            {
              Object RESULT =null;

              CUP$MyParserClassName$result = parser.getSymbolFactory().newSymbol("tag_content",3, ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.elementAt(CUP$MyParserClassName$top-1)), ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()), RESULT);
            }
          return CUP$MyParserClassName$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tag_content ::= 
            {
              Object RESULT =null;

              CUP$MyParserClassName$result = parser.getSymbolFactory().newSymbol("tag_content",3, ((java_cup.runtime.Symbol)CUP$MyParserClassName$stack.peek()), RESULT);
            }
          return CUP$MyParserClassName$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MyParserClassName$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MyParserClassName$do_action(
    int                        CUP$MyParserClassName$act_num,
    java_cup.runtime.lr_parser CUP$MyParserClassName$parser,
    java.util.Stack            CUP$MyParserClassName$stack,
    int                        CUP$MyParserClassName$top)
    throws java.lang.Exception
    {
              return CUP$MyParserClassName$do_action_part00000000(
                               CUP$MyParserClassName$act_num,
                               CUP$MyParserClassName$parser,
                               CUP$MyParserClassName$stack,
                               CUP$MyParserClassName$top);
    }
}

}
